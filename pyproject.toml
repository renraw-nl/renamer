[build-system]
requires = ["poetry-core>=1.3.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poetry]
name = "renamer"
version = "0.1.0"
description = "Batch rename files, similar to what IrfanView does"
authors = ["Warner Leijenaar <git@renraw.nl>"]
license = "MIT"
readme = "README.md"


[tool.poetry.dependencies]
python = ">=3.12,<3.14"
argh = "^0.31.0"
filelock = "^3.13.1"
mawk = "^0.1.4"
result = "^0.16.0"
rich = "^13.7.0"
rich-argparse = "^1.4.0"
tqdm = "^4.66.1"


[tool.poetry.group.dev.dependencies]
black = "^23.12.1"
interrogate = "^1.5.0"
isort = "^5.13.2"
pre-commit = "^3.6.0"
ruff = "^0.1.11"


[tool.poetry.group.test.dependencies]
hypothesis = "^6.92.2"
pytest = "^7.4.4"
pytest-mock = "^3.12.0"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"


[tool.pytest.ini_options]
# asyncio_mode = "auto"
# addopts = "--no-cov-on-fail --showlocals --strict-markers"
addopts = "--showlocals --strict-markers"
testpaths = ["tests"]
norecursedirs = "_build var* .*cache .vscode .venv"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "utils",
]


[tool.black]
line-length = 88
target-version = ["py311"]
exclude = '''
/(
   \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | \.vscode
  | build
  | dist
  | var
)/
'''


[tool.isort]
combine_as_imports = true
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = "builder, tests"
line_length = 88
multi_line_output = 3
no_lines_before = "LOCALFOLDER"
order_by_type = false
reverse_relative = true
profile = "black"


[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["docs", "build", ".venv", "var", ".*_cache"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
# generate-badge = "."
# badge-format = "svg"


[tool.ruff]
select = ["E", "F"]
ignore = []
line-length = 88


# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"


# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []


# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]


[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


# pymarkdownlnt configuration (yes both are correct
# ref. https://github.com/jackdewinter/pymarkdown/blob/main/docs/advanced_configuration.md#alternate-project-configuration-files
[tool.pymarkdown]
log = {level = "WARNING", stack-trace = false}

[tool.pymarkdown.extensions]
markdown-disallow-raw-html = {enabled = true}
front-matter = {enabled = true}
# markdown-task-list-items = {enabled = true}

[tool.pymarkdown.plugins]
# Enabled rules, with some configuration
emphasis-style = {enabled = true, style = "underscore"}
heading-style = {enabled = true, style = "atx"}
ul-indent = {enabled = true, indent = 4}

# disabled rules
code-block-style = {enabled = false}
fenced-code-language = {enabled = false}
line-length = {enabled = false}
no-blanks-blockquote = {enabled = false}
no-duplicate-header = {enabled = false}
ol-prefix = {enabled = false}
single-h1 = {enabled = false}
